# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- master

pool: 
  name: RaspberryPi
  vmImage: 'Ubuntu-20.04'

variables:
  buildConfiguration: 'Release'
  ImageName: 'rado94/simple-api:$(Build.BuildId)'

stages:
- stage: MASTER_PIPELINE
  jobs:
  - job:
    steps:
    - task: SonarCloudPrepare@1
      displayName: SonarCloudPrepare
      inputs:
        SonarCloud: 'Sonar Cloud'
        organization: 'radoslawtaborski-github'
        scannerMode: 'MSBuild'
        projectKey: 'RadoslawTaborski_SimpleAPISolution'
        projectName: 'SimpleAPI'
        extraProperties: |
          sonar.coverageReportPaths=$(Build.SourcesDirectory)/coverlet/reports/SonarQube.xml
          sonar.coverage.exclusions=**/Migrations/*.cs,**/*Tests*/**/*,**/Program.cs,**/Startup.cs
    - task: DotNetCoreCLI@2  
      displayName: 'DotnetRestore'  
      inputs:  
        command: restore  
        projects: |
          **/*/*.csproj
        includeNuGetOrg: true  
    - task: DotNetCoreCLI@2
      displayName: 'DotnetBuild$(buildConfiguration)'
      inputs:
        command: 'build'
        projects: |
          **/*/*.csproj
        arguments: '--configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: 'DotnetTest$(buildConfiguration)'
      inputs:
        command: test
        projects: '**/*Test/*.csproj'
        publishTestResults: true
        arguments: '--configuration $(buildConfiguration) --settings coverlet.runsettings.xml'
    - task: reportgenerator@5
      inputs:
        reports: '$(Agent.TempDirectory)/**/coverage.opencover.xml'
        targetdir: '$(Build.SourcesDirectory)/coverlet/reports'
        reporttypes: 'Cobertura;SonarQube'
      displayName: 'CodeCoverageReportCreation'  
    - task: PublishCodeCoverageResults@1
      displayName: 'CodeCoveragePublish'
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(Build.SourcesDirectory)/coverlet/reports/Cobertura.xml'
    - task: SonarCloudAnalyze@1
      displayName: SonarCloudAnalyze
    - task: SonarCloudPublish@1
      displayName: SonarCloudPublish
      inputs:
        pollingTimeoutSec: '300'

- stage: MASTER_PUBLISH
  condition: succeeded()
  jobs:
  - job:
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'DotnetPublish$(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
      inputs:
        command: publish
        publishWebProjects: false
        projects: 'src/SimpleAPI/SimpleAPI.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true
    - task: PublishBuildArtifacts@1
      condition: succeeded()
      displayName: 'ArtifactsPublish'

- stage: MASTER_DOCKER
  jobs:  
  - job: 
    displayName: Build and push Docker image
    steps:
    - task: Docker@1
      displayName: 'BuildDockerImage'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Hub'
        command: 'Build an image'
        dockerFile: '**/Dockerfile'
        imageName: '$(ImageName)'
        includeLatestTag: true
        useDefaultContext: false
        buildContext: '.'   
    - task: Docker@1
      displayName: 'PushDockerImage'
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'Docker Hub'
        command: 'Push an image'
        imageName: '$(ImageName)'
      condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))